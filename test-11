1.WRITE A FUNCTIONAL COMPONENT THAT USES THE USESTATE HOOK TO MANAGE A PIECE OF STATE REPRESENTING A USERNAME. INCLUDE AN INPUT FIELD THAT UPDATES THIS STATE.

-->>>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>React Username Input</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.development.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const UsernameInput = () => {
      const [username, setUsername] = React.useState('');

      const handleInputChange = (event) => {
        setUsername(event.target.value);
      };

      return (
        <div>
          <label htmlFor="username">Username:</label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={handleInputChange}
            placeholder="Enter your username"
          />
          <p>Entered username: {username}</p>
        </div>
      );
    };
    ReactDOM.render(<UsernameInput />, document.getElementById('root'));
  </script>
</body>
</html>




2.CREATE A COUNTER COMPONENT WITH A BUTTON THAT INCREMENTS THE COUNT BY 1 EACH TIME IT IS CLICKED EXTEND THE COMPONENT TO INCLUDE A SECOND BUTTON THAT DECREMENTS THE COUNT BY 1.

-->>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>React Counter Component</title>
->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.development.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel">
    const Counter = () => {
      const [count, setCount] = React.useState(0);

      const increment = () => {
        setCount(count + 1);
      };

      const decrement = () => {
        setCount(count - 1);
      };

      return (
        <div>
          <h1>Counter</h1>
          <p>Count: {count}</p>
          <button onClick={increment}>Increment</button>
          <button onClick={decrement}>Decrement</button>
        </div>
      );
    };
    ReactDOM.render(<Counter />, document.getElementById('root'));
  </script>
</body>
</html>


3.WRITE A COMPONENT THAT FETCHES AND DISPLAYS A LIST OF USERS FROM AN API WHEN THE COMPONENT MOUNTS USING THE USEEFFECT HOOK.

-->>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>React Fetch Users</title>
  <!-- Include React and ReactDOM from a CDN -->
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <!-- Include Babel for JSX transpilation -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const Users = () => {
      const [users, setUsers] = useState([]);
      const [loading, setLoading] = useState(true);

      useEffect(() => {
        const fetchUsers = async () => {
          try {
            const response = await fetch('https://jsonplaceholder.typicode.com/users');
            const data = await response.json();
            setUsers(data);
            setLoading(false);
          } catch (error) {
            console.error('Error fetching users:', error);
            setLoading(false);
          }
        };

        fetchUsers();
      }, []);

      if (loading) {
        return <div>Loading...</div>;
      }

      return (
        <div>
          <h1>List of Users</h1>
          <ul>
            {users.map(user => (
              <li key={user.id}>{user.name}</li>
            ))}
          </ul>
        </div>
      );
    };

    const App = () => {
      return (
        <div>
          <Users />
        </div>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>

